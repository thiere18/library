services:
  traefik:
    #use the latest version of traefik available
    image: traefik:v2.6
    ports:
      #listen to port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
      # Listen on port 443, default for HTTPS
      - 443:443
    restart: always
    labels:
      #Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      #Define the port inside of the Docker service to use
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # Make traefik use this domain in HTTP
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.lib.thiere18.studio`)
      # Use the traefik-public network (below declared)
      - traefik.docker.network=traefik-public
      # Traefik https the actual router using HTTPS
      - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.lib.thiere18.studio`)
      - traefik.http.routers.traefik-dashboard-https.tls=true
      # use the 'le' (Let's encrypt) resolver created below
      - traefik.http.routers.traefik-dashboard-https.tls.certresver=le
      # Use the special Traefik at api@internal with the web UI / Dashboard
      - traefik.http.routers.traefik-dashboard-https.service=api@internal
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.parmanent=true
      # traefik-http setup only to use the middleware to redirect to HTTPS
      - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
      # admin-auth middleware with HTTP basic auth
      # Using the environment variables USERNAME and HASHED_PASSWORD
      - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
      - traefik.frontend.auth.basic==${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
      # Enable HTTP Basic auth, using the middleware created above
      - traefik.routers.http.routers.traefik-dashboard-https.middlewares=admin-auth
    volumes:
      #add docker as mounted volume, so that the Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      #enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker 
      # do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # create ane entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      #create and entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # create the certificate resolver "le" for Let's encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=info@elapiz.io
      # Store the Let's encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # use the TLS challenge for Let's encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # enable the access log, with HTTP requests
      - --accesslog
      # enable the Traefik log, for configurations and errors
      - --log
      # Enable the dashboard and API
      - --api
    networks:
      # use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containg
  # the HTTPS Certificates
  traefik-public-certificates:  

networks:    
  # use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true